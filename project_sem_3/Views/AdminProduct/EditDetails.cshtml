@model project_sem_3.Models.ProductDetail

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<div class="d-sm-flex align-items-center justify-content-between mb-4">
    <h1 class="h3 mb-0 text-gray-800">Edit Product Detail</h1>
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="./">Dashboard</a></li>
        <li class="breadcrumb-item "><a href="../Product">Product</a></li>
        <li class="breadcrumb-item active" aria-current="page">Edit Details</li>
    </ol>
</div>

<div class="row">
    <div class="col-lg-12">
        <!-- Horizontal Form -->
        <div class="card mb-4">
            <div class="card-body">

                @using (Html.BeginForm("ProductDetailEdit", "Admin", FormMethod.Post, new { @class = "product-form" }))
                {
                    @Html.AntiForgeryToken()

                <div class="form-horizontal row">
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    @Html.HiddenFor(model => model.Id)

                    <div class="form-group col-lg-6">
                        @Html.LabelFor(model => model.Color, htmlAttributes: new { @class = "control-label col-md" })
                        <div class="col-md">
                            @Html.EditorFor(model => model.Color, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Color, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group col-lg-6">
                        @Html.LabelFor(model => model.Size, htmlAttributes: new { @class = "control-label col-md" })
                        <div class="col-md">
                            @Html.EditorFor(model => model.Size, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Size, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group col-lg-6">
                        @Html.LabelFor(model => model.Quantity, htmlAttributes: new { @class = "control-label col-md" })
                        <div class="col-md">
                            @Html.EditorFor(model => model.Quantity, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Quantity, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group col-lg-6">
                        @Html.LabelFor(model => model.Status, htmlAttributes: new { @class = "control-label col-md" })
                        <div class="col-md">
                            @Html.EnumDropDownListFor(model => model.Status, htmlAttributes: new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.Status, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group" hidden>
                        @Html.LabelFor(model => model.ProductId, "ProductId", htmlAttributes: new { @class = "control-label col-md" })
                        <div class="col-md">
                            @Html.DropDownList("ProductId", null, htmlAttributes: new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.ProductId, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group col-lg-6">
                        @Html.LabelFor(model => model.Thumbnails, htmlAttributes: new { @class = "control-label col-md" })
                        <div class="col-md-10 uploaded">
                            <button type="button" id="upload_widget" class="btn btn-outline-primary">Upload files</button>
                            @Html.ValidationMessageFor(model => model.Thumbnails, "", new { @class = "text-danger" })
                            @if (Model.GetThumbnailIds().Length > 0)
                            {
                                <ul class="cloudinary-thumbnails">
                                    @foreach (var imgId in Model.GetThumbnailIds())
                                    {
                                        <li class="cloudinary-thumbnails active" img-cloudinary="@imgId">
                                            <img src="@("https://res.cloudinary.com/dyi6c1dgi/image/upload/c_limit,h_60,w_90/v1588171812/pj-sem-3/"+imgId+".jpg")">
                                            <a href="#" class="cloudinary-delete">x</a>
                                        </li>
                                    }
                                </ul>
                            }
                        </div>
                        @* @todo @trungnq check link *@
                        @foreach (var imgId in Model.GetThumbnailIds())
                        {
                            <input type="hidden" name="thumbnails[]" data-cloudinary-public-id="@imgId" value="@("image/upload/v1588171812/pj-sem-3/"+imgId+".jpg")">
                        }
                    </div>
                        <div class="form-group">
                            <div class="col-md-offset-2 col-md">
                                <input type="submit" value="Save" class="btn btn-outline-secondary" />
                                <a class="btn btn-primary" href=".../Product">Cancel</a>
                            </div>
                        </div>
                    </div>
                </div>
                }
            </div>
        </div>
    </div>
</div>
@section Scripts {
        <script src="https://widget.cloudinary.com/v2.0/global/all.js" type="text/javascript"></script>
        <script type="text/javascript">
            function showUploadWidget() {
                cloudinary.openUploadWidget({
                    cloudName: "dyi6c1dgi",
                    uploadPreset: "m7jj1zvw",
                    sources: [
                        "local",
                        "url",
                        "camera"
                    ],
                    form: ".product-form",
                    fieldName: "thumbnails[]",
                    thumbnails: ".uploaded",
                    multiple: true
                },
                    (err, info) => {
                        if (!err) {
                            console.log("Upload Widget event - ", info);
                        }
                    });
            }

            document.getElementById("upload_widget").addEventListener("click", function () {
                showUploadWidget();
            }, false);

            $('body').on('click', '.cloudinary-delete', function () {
                var splittedLink = $(this).prev().attr('src').split('/');
                var imgId = splittedLink[splittedLink.length - 1].split('.')[0];
                $(`input[data-cloudinary-public-id="pj-sem-3/${imgId}"]`).remove();
                $(`li[img-cloudinary="${imgId}"]`).remove();
                return false;
            });
        </script>
    }